# Copyright (c) 2022-2024 Contributors to the Eclipse Foundation
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0

"""Wrapper to execute pivotal license finder and return its result."""

import csv
import os
import subprocess

from licensevalidator.lib.dependency import DependencyInfo


def __read_output_file(path: str) -> list[DependencyInfo]:
    """Read the output generated by pivotal license finder.

    Args:
        path (str): The path to the output file.

    Returns:
        list[DependencyInfo]: The list of dependencies
            contained in the output file.
    """
    result = []

    if os.path.isfile(path):
        with open(path, "r", encoding="utf-8") as csvfile:
            csvreader = csv.reader(csvfile, skipinitialspace=True)
            for row in csvreader:
                if len(row) != 3:
                    print(
                        f'Invalid entry in file "{path}", '
                        'expected exactly 3 fields! Found "{row}"'
                    )
                    continue

                dep_name = row[0]
                version = row[1]
                licenses = [license_name.strip() for license_name in row[2].split(",")]
                result.append(DependencyInfo(dep_name, version, licenses))

    return result


def execute_license_finder(working_dir: str, **kwargs) -> list[DependencyInfo]:
    """Execute pivotal license finder and returns the result.

    Args:
        working_dir (str):
            The path to where the python requirements files are stored.

    Returns:
        list[DependencyInfo]: All found dependencies of the license finder.
    """
    result = []

    process_args = [
        "license_finder",
        "report",
        "--save=/tmp/license-finder/dependencies-notice",
        "--prepare",
    ]

    python_version_key = "python_version"
    if python_version_key in kwargs:
        process_args.append(f"--python-version={kwargs[python_version_key]}")

    decision_file_key = "decisions_file"
    if decision_file_key in kwargs:
        process_args.append(f"--decisions_file={kwargs[decision_file_key]}")
    else:
        process_args.append("--decisions_file=/dependency_decisions_overwrites.yml")

    package_managers_key = "package_managers"
    if package_managers_key in kwargs:
        package_managers_list = " ".join(kwargs.get(package_managers_key))
        process_args.append(f"--enabled-package-managers={package_managers_list}")

    pip_requirements_path_key = "pip_requirements_path"
    if pip_requirements_path_key in kwargs:
        process_args.append(
            f"--pip-requirements-path={kwargs[pip_requirements_path_key]}"
        )

    subprocess.run(process_args, check=True, cwd=working_dir)

    result.extend(__read_output_file("/tmp/license-finder/dependencies-notice"))

    return result
